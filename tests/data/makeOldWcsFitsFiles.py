"""Construct two binary FITS tables containing lsst.afw.image.TanWcs

oldTanWcs.fits is a pure TAN WCS
oldTanSipWcs.fits is a TAN-SIP WCS
"""
from lsst.daf.base import PropertyList
from lsst.afw.image import makeWcs


def makeAndWriteWcs():
    tanWcsMetadata = getTanWcsMetata()
    tanWcs = makeWcs(tanWcsMetadata)
    tanWcs.writeFits("oldTanWcs.fits")

    tanSipWcsMetata = getTanSipWcsMetata()
    tanSipWcs = makeWcs(tanSipWcsMetata)
    tanSipWcs.writeFits("oldTanSipWcs.fits")


def getTanWcsMetata():
    metadata = PropertyList()
    # the following was fit using CreateWcsWithSip from meas_astrom
    # and is valid over this bbox: (minimum=(0, 0), maximum=(3030, 3030))
    for name, value in (
        ("RADESYS", "ICRS"),
        ("CTYPE1", "RA---TAN"),
        ("CTYPE2", "DEC--TAN"),
        ("CRPIX1", 1531.1824767147),
        ("CRPIX2", 1531.1824767147),
        ("CRVAL1", 43.035511801383),
        ("CRVAL2", 44.305697682784),
        ("CUNIT1", "deg"),
        ("CUNIT2", "deg"),
        ("CD1_1", 0.00027493991598151),
        ("CD1_2", -3.2758487104158e-06),
        ("CD2_1", 3.2301310675830e-06),
        ("CD2_2", 0.00027493937506632),
    ):
        metadata.set(name, value)
    return metadata


def getTanSipWcsMetata():
    """Return metadata for a TAN-SIP WCS

    The WCS was fit over this range of pixel positions (0, 0) to (3030, 3030))
    """
    metadata = getTanWcsMetata()
    for name, value in (
        ("CTYPE1", "RA---TAN-SIP"),
        ("CTYPE2", "DEC--TAN-SIP"),
        ("A_ORDER", 5),
        ("A_0_2", -1.7769487466972e-09),
        ("A_0_3", 5.3745894718340e-13),
        ("A_0_4", -7.2921116596880e-17),
        ("A_0_5", 8.6947236956136e-21),
        ("A_1_1", 5.4246387438098e-08),
        ("A_1_2", -1.5689083084641e-12),
        ("A_1_3", 1.2424130500997e-16),
        ("A_1_4", 3.9982572658006e-20),
        ("A_2_0", 4.9268299826160e-08),
        ("A_2_1", 1.6365657558495e-12),
        ("A_2_2", 1.1976983061953e-16),
        ("A_2_3", -1.7262037266467e-19),
        ("A_3_0", -5.9235031179999e-13),
        ("A_3_1", -3.4444326387310e-16),
        ("A_3_2", 1.4377441160800e-19),
        ("A_4_0", 1.8736407845095e-16),
        ("A_4_1", 2.9213314172884e-20),
        ("A_5_0", -5.3601346091084e-20),
        ("B_ORDER", 5),
        ("B_0_2", 4.9268299822979e-08),
        ("B_0_3", -5.9235032026906e-13),
        ("B_0_4", 1.8736407776035e-16),
        ("B_0_5", -5.3601341373220e-20),
        ("B_1_1", 5.4246387435453e-08),
        ("B_1_2", 1.6365657531115e-12),
        ("B_1_3", -3.4444326228808e-16),
        ("B_1_4", 2.9213312399941e-20),
        ("B_2_0", -1.7769487494962e-09),
        ("B_2_1", -1.5689082999319e-12),
        ("B_2_2", 1.1976983393279e-16),
        ("B_2_3", 1.4377441169892e-19),
        ("B_3_0", 5.3745894237186e-13),
        ("B_3_1", 1.2424130479929e-16),
        ("B_3_2", -1.7262036838229e-19),
        ("B_4_0", -7.2921117326608e-17),
        ("B_4_1", 3.9982566975450e-20),
        ("B_5_0", 8.6947240592408e-21),
        ("AP_ORDER", 6),
        ("AP_0_0", -5.4343024221207e-11),
        ("AP_0_1", 5.5722265946666e-12),
        ("AP_0_2", 1.7769484042400e-09),
        ("AP_0_3", -5.3773609554820e-13),
        ("AP_0_4", 7.3035278852156e-17),
        ("AP_0_5", -8.7151153799062e-21),
        ("AP_0_6", 3.2535945427624e-27),
        ("AP_1_0", -3.8944805432871e-12),
        ("AP_1_1", -5.4246388067582e-08),
        ("AP_1_2", 1.5741716194971e-12),
        ("AP_1_3", -1.2447067748187e-16),
        ("AP_1_4", -3.9960260822306e-20),
        ("AP_1_5", 1.1297941471380e-26),
        ("AP_2_0", -4.9268299293185e-08),
        ("AP_2_1", -1.6256111849359e-12),
        ("AP_2_2", -1.1973373130440e-16),
        ("AP_2_3", 1.7266948205700e-19),
        ("AP_2_4", -3.7059606160753e-26),
        ("AP_3_0", 5.9710911995811e-13),
        ("AP_3_1", 3.4464427650041e-16),
        ("AP_3_2", -1.4381853884204e-19),
        ("AP_3_3", -7.6527426974322e-27),
        ("AP_4_0", -1.8748435698960e-16),
        ("AP_4_1", -2.9267280226373e-20),
        ("AP_4_2", 4.8004317051259e-26),
        ("AP_5_0", 5.3657330221120e-20),
        ("AP_5_1", -1.6904065766661e-27),
        ("AP_6_0", -1.9484495120493e-26),
        ("BP_ORDER", 6),
        ("BP_0_0", -5.4291220607725e-11),
        ("BP_0_1", -3.8944871307931e-12),
        ("BP_0_2", -4.9268299290361e-08),
        ("BP_0_3", 5.9710912831833e-13),
        ("BP_0_4", -1.8748435594265e-16),
        ("BP_0_5", 5.3657325543368e-20),
        ("BP_0_6", -1.9484577299247e-26),
        ("BP_1_0", 5.5722051513577e-12),
        ("BP_1_1", -5.4246388065000e-08),
        ("BP_1_2", -1.6256111821465e-12),
        ("BP_1_3", 3.4464427499767e-16),
        ("BP_1_4", -2.9267278448109e-20),
        ("BP_1_5", -1.6904244067295e-27),
        ("BP_2_0", 1.7769484069376e-09),
        ("BP_2_1", 1.5741716110182e-12),
        ("BP_2_2", -1.1973373446176e-16),
        ("BP_2_3", -1.4381853893526e-19),
        ("BP_2_4", 4.8004294492911e-26),
        ("BP_3_0", -5.3773609074713e-13),
        ("BP_3_1", -1.2447067726801e-16),
        ("BP_3_2", 1.7266947774875e-19),
        ("BP_3_3", -7.6527556667042e-27),
        ("BP_4_0", 7.3035279660505e-17),
        ("BP_4_1", -3.9960255158200e-20),
        ("BP_4_2", -3.7059659675039e-26),
        ("BP_5_0", -8.7151157361284e-21),
        ("BP_5_1", 1.1297944388060e-26),
        ("BP_6_0", 3.2535788867488e-27),
    ):
        metadata.set(name, value)
    return metadata


if __name__ == "__main__":
    makeAndWriteWcs()
