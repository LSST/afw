// -*- lsst-c++ -*-

namespace lsst { namespace afw { namespace cameraGeom {

/**
\page afwCameraGeom CameraGeom

\section afwCameraGeomOverview Overview

The cameraGeom package describes the geometry of an imaging camera, including the location of each detector
(e.g. CCD) on the focal plane, information about the amplifier subregions of each detector, and the location
of known bad pixels in each detector. The cameraGeom package supports operations such as:
- Assemble images from raw data (combining amplifier subregions and trimming overscan). CameraGeom does not
 assemble an entire image (see ip_isr AssembleCcdTask for that) but includes functions in
 \ref assembleImage "assembleImage" that do much of the work.
- Transform 2-d points between various \ref afwCameraGeomCoordSys "camera coordinate systems",
  using \ref camera.Camera.transform "Camera.transform". This can be used as part of generating a
  \ref geom::SkyWcs "WCS" or to examine the effects of optical distortion.
- Create a graphic showing the layout of detectors on the focal plane, using utils.plotFocalPlane.
- Display a mosaic image that combines all detector images, using utils.showMosaic.

Data for constructing a \ref camera.Camera "Camera" comes from the appropriate observatory-specific
obs_ package. For example obs_lsstSim contains data for the LSST camera simulator, obs_sdss contains
data for the SDSS imager, and obs_subaru contains data for both Suprime-Cam and Hyper Suprime-Cam (HSC).

\section afwCameraGeomUtils Camera Geometry Utilities

There are a few utilities available for visualizing and debugging \ref camera.Camera objects.  Examples of
available utility methods are: display a particular amp, display an assembled sensor, display a
the full camera modaic, plot the sensor boundaries with a grid of test points in
\ref afwCameraGeomFOCAL_PLANE "FOCAL_PLANE" coordinates.  An example of how to use the utilities
to visualize a camera is available in the obs_lsstSim package as $OBS_LSSTSIM_DIR/bin/displayCamera.py.
Following is the help from displayCamera.py:
\verbatim
usage: displayCamera.py [-h] [--showAmp SHOWAMP [SHOWAMP ...]]
                        [--showCcd SHOWCCD [SHOWCCD ...]]
                        [--showRaft SHOWRAFT [SHOWRAFT ...]] [--showCamera]
                        [--cameraBinSize CAMERABINSIZE] [--plotFocalPlane]

Display the lsstSim camera

optional arguments:
  -h, --help            show this help message and exit
  --showAmp SHOWAMP [SHOWAMP ...]
                        Show an amplifier segment on an image display. May occur multiple
                        times. Format like R:Rx,Ry S:Sx,Sy A:Ax,Ay e.g. "R:2,2
                        S:1,1 A:0,0"
  --showCcd SHOWCCD [SHOWCCD ...]
                        Show a CCD from the mosaic on an image display. May occur multiple
                        times. Format like R:Rx,Ry S:Sx,Sy e.g. "R:2,2 S:1,1"
  --showRaft SHOWRAFT [SHOWRAFT ...]
                        Show a Raft from the mosaic on an image display. May occur multiple
                        times. Format like R:Rx,Ry e.g. "R:2,2"
  --showCamera          Show the camera mosaic an image display.
  --cameraBinSize CAMERABINSIZE
                        Size of binning when displaying the full camera mosaic
  --plotFocalPlane      Plot the focalplane in an interactive matplotlib
                        window
\endverbatim

\section afwCameraGeomCoordSys Camera Coordinate Systems

The cameraGeom package supports the following camera-based 2-dimensional coordinate systems, and it is
possible to add others:
- \anchor afwCameraGeomFOCAL_PLANE __FOCAL_PLANE__: position on a 2-d planar approximation to the focal plane
  (x,y mm). The origin and orientation may be defined by the camera team, but we strongly recommend
  that the origin be on the optical axis and (if using CCD detectors) that the X axis be aligned along
  CCD rows.
  Note: location and orientation of detectors are defined in a 3-d version of FOCAL_PLANE coordinates
  (the z axis is also relevant).
- \anchor afwCameraGeomFIELD_ANGLE __FIELD_ANGLE__: angle of a principal ray relative to the optical axis
  (x,y radians). The orientation of the x,y axes is the same as \ref afwCameraGeomFOCAL_PLANE "FOCAL_PLANE".
- \anchor afwCameraGeomPIXELS __PIXELS__: nominal position on the entry surface of a given detector
  (x, y unbinned pixels).
  For CCD detectors the x axis __must__ be along rows (the direction of the serial register).
  This is required for our interpolation algorithm to interpolate across bad columns.
- \anchor afwCameraGeomACTUAL_PIXELS __ACTUAL_PIXELS__: like PIXELS, but takes into account pixel-level
  distortions (deviations from the nominal model of uniformly spaced rectangular pixels).
- \anchor afwCameraGeomTAN_IXELS __TAN_PIXELS__: is a variant of PIXELS with estimated optical distortion
  removed. TAN_PIXELS is an affine transformation from FIELD_ANGLE coordinates, where PIXELS and TAN_PIXELS match
  at the center of the pupil frame.

\section afwCameraGeomBasicUsage Basic Usage

The file examples/cameraGeomExample.py shows some basic usage of the cameraGeom package

\include examples/cameraGeomExample.py

\section afwCameraGeomObject Objects

The cameraGeom package contains the following important objects; unless otherwise noted, all are available
in both C++ and Python:

### Camera (Python only)

\ref camera.Camera "Camera" is a collection of \ref Detector "Detectors". \ref camera.Camera "Camera"
also supports coordinate transformation between all \ref afwCameraGeomCoordSys "camera coordinate systems".

### Detector

Detector contains information about a given imaging detector (typically a CCD), including its position and
orientation in the focal plane and information about amplifiers (such as the image region, overscan and
readout corner). Amplifier data is stored as records in an \ref table::AmpInfoTable "amp info table",
and Detector acts as a collection of \ref table::AmpInfoRecord "amp info records".

Detector also supports transforms between \ref afwCameraGeomFOCAL_PLANE "focal plane",
\ref afwCameraGeomPIXELS "pixels", and \ref afwCameraGeomACTUAL_PIXELS "actual pixels" coordinates.

### CameraSys and CameraSysPrefix

CameraSys represents a \ref afwCameraGeomCoordSys "camera coordinate system". It contains
a coordinate system name and a detector name. The detector name is blank for non-detector-based
\ref afwCameraGeomCoordSys "camera coordinate systems" such as
\ref afwCameraGeomFOCAL_PLANE "FOCAL_PLANE" and \ref afwCameraGeomFIELD_ANGLE "FIELD_ANGLE",
but must always name a specific detector for detector-based coordinate systems.

CameraSysPrefix is a specialized variant of CameraSys that represents a detector-based coordinate system
when the detector is not specified. CameraSysPrefix contains a coordinate system name but no detector name.

A constant is provided each \ref afwCameraGeomCoordSys "camera coordinate system":
- __FOCAL_PLANE__ (a CoordSys) for the \ref afwCameraGeomFOCAL_PLANE "FOCAL_PLANE" system
- __FIELD_ANGLE__ (a CoordSys) for the \ref afwCameraGeomFIELD_ANGLE "FIELD_ANGLE" system
- __PIXELS__ (a CoordSysPrefix) for the \ref afwCameraGeomPIXELS "PIXELS" system
- __ACTUAL_PIXELS__ (a CoordSysPrefix) for the \ref afwCameraGeomACTUAL_PIXELS "ACTUAL_PIXELS" system

CameraSys and CameraSysPrefix are closely related and most methods that take one type
are overloaded to also take the other. For example
\ref camera.Camera.transform "Camera.transform(fromCameraPoint, toSys)" transforms a point from one
coordinate system to another. ToSys may be either a CameraSys or a CameraSysPrefix, and this affects
whether tranform will use the specified detector or search for a suitable detector.
See the \ref afwCameraGeomBasicUsage "basic usage" for for a concrete example.

### CameraPoint

A class that holds a 2-dimensional location and its associated
\ref afwCameraGeomCoordSys "camera coordinate system":
- point: a 2-dimensional location in some camera coordinate system (a geom::Point2D).
- cameraSys: the associated \ref afwCameraGeomCoordSys "camera coordinate system" (a CameraSys,
never a CameraSysPrefix)

The intent is to make transformation more robust and less confusing by keeping a 2-d point and its camera
coordinate system together. This is appropriate for transforming small numbers of points, but does not
scale well when transforming large numbers of points. For large numbers of points use
camera.getTransformMap().transform(pointList, fromSys, toSys).

### \anchor afwCameraGeomTransformMap TransformMap

TransformMap is a collection of \ref geom::TransformPoint2ToPoint2 "Transforms"
from one \ref afwCameraGeomCoordSys "camera coordinate system" to another.

\ref camera.Camera "Camera" and Detector both contain TransformMaps.
 */

}}} // namespace lsst::afw::cameraGeom
